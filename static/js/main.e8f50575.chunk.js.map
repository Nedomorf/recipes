{"version":3,"sources":["Components/Search/Search.module.css","Components/Options/Options.module.css","Components/Recipe/Recipe.module.css","assets/bg.mp4","Components/Navbar/Navbar.module.css","Components/Recipe/Recipe.jsx","Components/Navbar/Navbar.jsx","Components/Options/Options.jsx","Components/Search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","props","id","className","style","recipe","recipeBody","Navbar","useState","activeMenu","setActiveMenu","background","navToggle","onClick","active","nav","to","navItem","menuItem","icon","aria-hidden","Options","activeOptions","setActiveOptions","activateOptions","optionsArea","toggleTheme","Search","search","setSearch","focus","setFocus","loop","autoPlay","muted","clip","src","bgVideo","type","searchContent","searchArea","value","onChange","e","target","onFocus","onBlur","onInputFocus","htmlFor","str","xmlhttp","XMLHttpRequest","open","send","onreadystatechange","readyState","status","document","getElementById","responseText","includes","innerHTML","innerText","console","log","getRecipe","btn","GlobalThemeStyle","createGlobalStyle","theme","mode","App","themeMode","setThemeMode","Redirect","from","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e8f50575.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"Search_Search__GTbph\",\"searchArea\":\"Search_searchArea__2vK7L\",\"onInputFocus\":\"Search_onInputFocus__2DN-C\",\"searchContent\":\"Search_searchContent__1iSSu\",\"btn\":\"Search_btn__3UWuV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Options\":\"Options_Options__2zPod\",\"optionsArea\":\"Options_optionsArea__39qxx\",\"activateOptions\":\"Options_activateOptions__3R_EI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__2Cj8t\",\"recipeBody\":\"Recipe_recipeBody__9PlZ-\"};","module.exports = __webpack_public_path__ + \"static/media/bg.8ed8db8c.mp4\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__4UcSd\",\"active\":\"Navbar_active__exR9x\",\"navItem\":\"Navbar_navItem__imhuJ\",\"navToggle\":\"Navbar_navToggle__3ejhW\"};","import React from \"react\";\r\nimport style from './Recipe.module.css';\r\n\r\nlet Recipe = (props) => {\r\n    return (\r\n        <div id=\"recipe\" className={style.recipe}>\r\n            <div id=\"recipeBody\" className={style.recipeBody}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from './Navbar.module.css';\r\n\r\nconst Navbar = (props) => {\r\n\r\n    const [activeMenu, setActiveMenu] = useState(false);\r\n\r\n    const toggleNav = () => {\r\n        return activeMenu\r\n            ? setActiveMenu(false)\r\n            : setActiveMenu(true)\r\n    }\r\n\r\n    return (\r\n        <div style={{background:`none`}}>\r\n            <div id={style.navToggle} onClick={toggleNav} className={activeMenu ? style.active : null}/>\r\n            <div id={style.nav} className={activeMenu ? style.active : null}>\r\n                <NavLink to=\"search\" className={style.navItem}>\r\n                    <div>\r\n                        <span className={style.menuItem}>Search</span>\r\n                        <span className={style.icon}><i className=\"fa fa-search\" aria-hidden=\"true\"/></span>\r\n                    </div>\r\n                </NavLink>\r\n                <NavLink to=\"#\" className={style.navItem}>\r\n                    <div>\r\n                        <span className={style.menuItem}>Portfolio</span>\r\n                        <span className={style.icon}><i className=\"fa fa-user-o\" aria-hidden=\"true\"/></span>\r\n                    </div>\r\n                </NavLink>\r\n                <NavLink to=\"#\" className={style.navItem}>\r\n                    <div>\r\n                        <span className={style.menuItem}>Contact</span>\r\n                        <span className={style.icon}><i className=\"fa fa-phone\" aria-hidden=\"true\"/></span>\r\n                    </div>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import style from \"./Options.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {ThemeProvider} from \"styled-components\";\r\n\r\nconst Options = (props) => {\r\n\r\n    const [activeOptions, setActiveOptions] = useState(false);\r\n\r\n    const toggleOptions = () => {\r\n        return activeOptions\r\n            ? setActiveOptions(false)\r\n            : setActiveOptions(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.Options} onClick={toggleOptions}>\r\n                <i className=\"fa fa-cog\" aria-hidden=\"true\"/>\r\n            </div>\r\n            <div className={`${activeOptions ? style.activateOptions : null} ${style.optionsArea}`}>\r\n                <div>\r\n                    <button onClick={props.toggleTheme}>\r\n                        2135345\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Options;","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from './Search.module.css';\r\nimport bgVideo from '../../assets/bg.mp4';\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Options from \"../Options/Options\";\r\n\r\nconst Search = () => {\r\n\r\n    const onFocusLost = () => {\r\n        return (search === '')\r\n            ? setFocus(false)\r\n            : null\r\n    }\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [focus, setFocus] = useState(false);\r\n\r\n    let getRecipe = () => {\r\n        let str = search;\r\n        // let str = 'https://vk.com/public155530308?w=wall-155530308_39638';\r\n        let xmlhttp = new XMLHttpRequest();\r\n        xmlhttp.open(\"GET\", \"https://unoiled-initiator.000webhostapp.com/rar.php?q=\" + str, true);\r\n        xmlhttp.send();\r\n\r\n        xmlhttp.onreadystatechange = function () {\r\n            // <4 = ожидаем ответ от сервера\r\n            if (xmlhttp.readyState < 4) {\r\n                let a = '';\r\n            }\r\n            // 4 = Ответ от сервера полностью загружен\r\n            else if (xmlhttp.readyState === 4) {\r\n                // 200 - 299 = успешная отправка данных!\r\n                if (xmlhttp.status === 200 && xmlhttp.status < 300) {\r\n                    // return <Redirect to={{\r\n                    //     pathname: '/recipe',\r\n                    //     state: {recipe: xmlhttp.responseText}\r\n                    // }}/>\r\n                    let recipe = document.getElementById('recipeBody');\r\n                    xmlhttp.responseText.includes('<!DOCTYPE html>')\r\n                        ? recipe.innerHTML = xmlhttp.responseText\r\n                        : recipe.innerText = 'Не удалось получить рецепт, проверьте ссылку.'\r\n                    console.log(xmlhttp.responseText)\r\n                    console.log(typeof (xmlhttp.responseText))\r\n                    // document.querySelector('body').innerHTML = xmlhttp.responseText;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.Search}>\r\n            <video loop autoPlay muted className={style.clip}>\r\n                <source src={bgVideo} type=\"video/mp4\"/>\r\n                Your browser does not support the video tag.\r\n            </video>\r\n            <div className={style.searchContent}>\r\n                <h1>hello</h1>\r\n                <div className={style.searchArea}>\r\n                    <input id=\"search\"\r\n                           type=\"text\"\r\n                           value={search}\r\n                           onChange={(e) => setSearch(e.target.value)}\r\n                           onFocus={() => setFocus(true)}\r\n                           onBlur={() => onFocusLost()}\r\n                           className={focus ? style.onInputFocus : null}\r\n                    />\r\n                    <label htmlFor=\"search\">Paste your url here</label>\r\n                </div>\r\n                <NavLink to='/recipe' onClick={() => getRecipe()} className={style.btn}>\r\n                    проверить\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport {createGlobalStyle, ThemeProvider} from \"styled-components\";\r\nimport theme from 'styled-theming';\r\nimport Recipe from \"./Components/Recipe/Recipe\";\r\nimport Search from \"./Components/Search/Search\";\r\nimport Options from \"./Components/Options/Options\";\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\n\r\n// const elementsBackgroundColor = theme('mode', {\r\n//     fire: '#ea6534',\r\n//     dark: '#000'\r\n// })\r\n\r\nconst GlobalThemeStyle = createGlobalStyle`\r\n* {\r\nbackground: ${props => {\r\n    switch (props.theme.mode) {\r\n        case 'dark':\r\n            return '#000';\r\n        default:\r\n            return '#ea6534';\r\n    }\r\n}};\r\ncolor: ${props => {\r\n    switch (props.theme.mode) {\r\n        case 'dark':\r\n            return '#fff';\r\n        default:\r\n            return '#282c34';\r\n    }\r\n}}\r\n`\r\n\r\nfunction App() {\r\n\r\n    const [themeMode, setThemeMode] = useState('dark');\r\n\r\n    const toggleTheme = () => {\r\n        let mode = '';\r\n        if (themeMode === 'dark') {\r\n            mode = 'fire'\r\n        } else if (themeMode === 'fire') {\r\n            mode = 'dark'\r\n        }\r\n        return setThemeMode(mode);\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={{mode: themeMode}}>\r\n            <GlobalThemeStyle/>\r\n            <Options toggleTheme={toggleTheme}/>\r\n            <Navbar/>\r\n            <Redirect from={'/recipes'} to={'/'}/>\r\n            <Switch>\r\n                <Route path='/' render={() => <Search/>}/>\r\n                <Route path='/search' render={() => <Search/>}/>\r\n                <Route path='/recipe' render={(props) => <Recipe {...props}/>}/>\r\n            </Switch>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let'style check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It'style the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}